#!groovy
import groovy.json.JsonSlurperClassic

pipeline {

  agent any

  environment {
    BRANCH_NAME = env.GIT_BRANCH.replace("origin/", "")
  }

  stages {
    stage('Build') {
      steps {
        dir('messaging-app') {
          sh '../mvnw clean verify'
        }
      }
    }

    stage("Get Jenkins crumb from curl command") {
      steps {
        script {
          final String url = "http://c3e655d9ed99.ngrok.io/crumbIssuer/api/json"

          final def (String response, int code) =
          sh(script: "curl -s -w '\\n%{response_code}' $url", returnStdout: true)
                  .trim()
                  .tokenize("\n")

          echo "HTTP response status code: $code"

          if (code == 200) {
            echo "HTTP response: $response"
            def json = new JsonSlurperClassic().parseText(response)
            echo "JSON Object: $json"
            def crumb = json.crumb
            echo "Jenkins_Crumb = $crumb"
            env.JENKINS_CRUMB = crumb
          }
        }
      }
    }

    stage("Check if webhook already exists") {
      steps {
        script {
          final String url = "http://pact_broker/pacts/provider/user-service/consumer/messaging-app/webhooks"
          env.RESPONSE = sh(script: "curl -XGET $url", returnStdout: true).trim()
          echo "Response: $RESPONSE"
          def json = new JsonSlurperClassic().parseText(RESPONSE)
          echo "JSON Object: $json"
          env.CREATE_WEBHOOK = "false"
          env.PUBLISH_PACT = "false"
          if(json.properties.keySet().contains("error")){
            echo "Please publish the pact first"
            env.PUBLISH_PACT = "true"
            env.CREATE_WEBHOOK = "true"
          }else{
            try{
              def href = json['_links']['pb:webhooks'][0].href
            }catch(NullPointerException e){
              echo "Please create new Webhook"
              env.CREATE_WEBHOOK = "true"
            }
          }

        }
      }
    }

    stage('Publish Pacts for first time') {
      when {environment name: 'PUBLISH_PACT', value: 'true' }
      steps {
        dir('messaging-app') {

          sh '../mvnw pact:publish -Dpact.consumer.version=${GIT_COMMIT} -Dpact.tag=${BRANCH_NAME}'
        }
      }
    }

    stage('Create a webhook and add the Jenkins Crumb in the webhook') {
      when {environment name: 'CREATE_WEBHOOK', value: 'true' }
      steps {
        sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.61.1/pact-1.61.1-linux-x86_64.tar.gz'
        sh 'tar xzf pact-1.61.1-linux-x86_64.tar.gz'
        dir('pact/bin') {
          sh "./pact-broker create-webhook 'http://c3e655d9ed99.ngrok.io/job/user-service-build-and-deploy/buildWithParameters?pactConsumerTags=master' --request=POST --header='Accept: application/json' 'Jenkins-Crumb:${JENKINS_CRUMB}' --broker-base-url='http://pact_broker' --consumer=messaging-app --provider=user-service --contract_content_changed --verbose"
        }
      }
    }

    stage('Publish Pacts') {
      steps {
        dir('messaging-app') {

          sh '../mvnw pact:publish -Dpact.consumer.version=${GIT_COMMIT} -Dpact.tag=${BRANCH_NAME}'
        }
      }
    }

      stage('Check Pact Verifications') {
        steps {
          sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.61.1/pact-1.61.1-linux-x86_64.tar.gz'
          sh 'tar xzf pact-1.61.1-linux-x86_64.tar.gz'
          dir('pact/bin') {
            sh "./pact-broker can-i-deploy --retry-while-unknown=12 --retry-interval=10 -a messaging-app -b http://pact_broker -e ${GIT_COMMIT}"
          }
        }
      }
      stage('Deploy') {
        when {
          branch 'master'
        }
        steps {
          echo 'Deploying to prod now...'
        }
      }
    }
  }