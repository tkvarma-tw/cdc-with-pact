#!groovy
pipeline {

  agent any

  environment {
    BRANCH_NAME = env.GIT_BRANCH.replace("origin/", "")
  }

  stages {
//    stage('Build') {
//      steps {
//        dir('messaging-app') {
//          sh '../mvnw clean verify'
//        }
//      }
//    }
//    stage('Publish Pacts') {
//      steps {
//        dir('messaging-app') {
//          sh '../mvnw pact:publish -Dpact.consumer.version=${GIT_COMMIT} -Dpact.tag=${BRANCH_NAME}'
//        }
//      }
//    }
    stage("Using curl example") {
      steps {
        script {
          final String url = "http://17115c52f9f4.ngrok.io/crumbIssuer/api/json"

          final def (String response, int code) =
          sh(script: "curl -s -w '\\n%{response_code}' $url", returnStdout: true)
                  .trim()
                  .tokenize("\n")

          echo "HTTP response status code: $code"

          if (code == 200) {
            def crumb = sh(script: "echo '$response' | jq -r '.actions[] | select(._class == \"org.jenkinsci.plugins.strictcrumbissuer.StrictCrumbIssuer\") | .crumb'", returnStdout: true).trim()

            echo "Jenkins_Crumb = $crumb"
          }
        }
      }
//      stage('Check Pact Verifications') {
//        steps {
//          sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.61.1/pact-1.61.1-linux-x86_64.tar.gz'
//          sh 'tar xzf pact-1.61.1-linux-x86_64.tar.gz'
//          dir('pact/bin') {
//            sh "./pact-broker can-i-deploy --retry-while-unknown=12 --retry-interval=10 -a messaging-app -b http://pact_broker -e ${GIT_COMMIT}"
//          }
//        }
//      }
//      stage('Deploy') {
//        when {
//          branch 'master'
//        }
//        steps {
//          echo 'Deploying to prod now...'
//        }
//      }
    }
  }
}